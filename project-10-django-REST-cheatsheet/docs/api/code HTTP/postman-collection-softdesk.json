{
	"info": {
		"_postman_id": "8f5a9c2e-7b4a-4c8e-9d3f-2e1a5b6c7d8e",
		"name": "SoftDesk Support API - Test Complet des Codes HTTP",
		"description": "Collection compl√®te pour tester tous les endpoints de l'API SoftDesk Support avec tous les codes de r√©ponse HTTP possibles.\n\nCette collection couvre :\n- üîê Authentification JWT\n- üë• Gestion des utilisateurs\n- üìã Gestion des projets\n- ü§ù Gestion des contributeurs\n- üêõ Gestion des issues\n- üí¨ Gestion des commentaires\n- ‚ùå Sc√©narios d'erreur\n\nCodes HTTP test√©s :\n- 200 OK, 201 Created, 204 No Content\n- 400 Bad Request, 401 Unauthorized, 403 Forbidden\n- 404 Not Found, 405 Method Not Allowed, 500 Internal Server Error",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Obtenir Token JWT - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access');",
									"    pm.expect(jsonData).to.have.property('refresh');",
									"    ",
									"    // Stocker les tokens pour les autres requ√™tes",
									"    pm.collectionVariables.set(\"access_token\", jsonData.access);",
									"    pm.collectionVariables.set(\"refresh_token\", jsonData.refresh);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/token/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Token invalide - 401 Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response contains error details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"utilisateur_inexistant\",\n    \"password\": \"motdepasse_incorrect\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/token/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Rafra√Æchir Token - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has new access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/token/refresh/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"token",
								"refresh",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Donn√©es manquantes - 400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains validation errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/token/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"token",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üë• Users",
			"item": [
				{
					"name": "Cr√©er un utilisateur - 201 Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"User created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData.username).to.eql('nouvel_utilisateur');",
									"    ",
									"    // Stocker l'ID du nouvel utilisateur",
									"    pm.collectionVariables.set(\"new_user_id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"Password not in response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.have.property('password');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"nouvel_utilisateur\",\n    \"email\": \"nouveau@example.com\",\n    \"password\": \"motdepasse123\",\n    \"password_confirm\": \"motdepasse123\",\n    \"age\": 25,\n    \"can_be_contacted\": true,\n    \"can_data_be_shared\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Lister les utilisateurs - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Users have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('id');",
									"        pm.expect(jsonData[0]).to.have.property('username');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtenir un utilisateur par ID - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User details returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/{{new_user_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{new_user_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Acc√®s non autoris√© - 401 Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Authentication required message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Utilisateur inexistant - 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Not found message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/99999/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"99999",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Donn√©es invalides - 400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validation errors returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\",\n    \"email\": \"email_invalide\",\n    \"password\": \"123\",\n    \"age\": -5\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìã Projects",
			"item": [
				{
					"name": "Cr√©er un projet - 201 Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Project created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name).to.eql('Projet Test API');",
									"    ",
									"    // Stocker l'ID du projet pour les autres tests",
									"    pm.collectionVariables.set(\"project_id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"Author is current user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('author');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Projet Test API\",\n    \"description\": \"Projet cr√©√© pour tester tous les endpoints de l'API\",\n    \"type\": \"back-end\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Lister les projets - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Projects have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('id');",
									"        pm.expect(jsonData[0]).to.have.property('name');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtenir un projet par ID - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Project details returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Modifier un projet - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Project updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('Projet Test API - Modifi√©');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Projet Test API - Modifi√©\",\n    \"description\": \"Description mise √† jour du projet de test\",\n    \"type\": \"front-end\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Projet inexistant - 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Not found message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/99999/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"99999",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "M√©thode non autoris√©e - 405 Method Not Allowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Method not allowed message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ü§ù Contributors",
			"item": [
				{
					"name": "Ajouter un contributeur - 201 Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Contributor added successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData).to.have.property('project');",
									"    ",
									"    // Stocker l'ID du contributeur",
									"    pm.collectionVariables.set(\"contributor_id\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": {{new_user_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/contributors/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"contributors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Lister les contributeurs - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Contributors have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('id');",
									"        pm.expect(jsonData[0]).to.have.property('user');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/contributors/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"contributors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Supprimer un contributeur - 204 No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"No content returned\", function () {",
									"    pm.expect(pm.response.text()).to.eql('');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/contributors/{{contributor_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"contributors",
								"{{contributor_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Acc√®s refus√© - 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Permission denied message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{other_user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 1\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/contributors/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"contributors",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üêõ Issues",
			"item": [
				{
					"name": "Cr√©er une issue - 201 Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Issue created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData.title).to.eql('Bug critique √† corriger');",
									"    ",
									"    // Stocker l'ID de l'issue",
									"    pm.collectionVariables.set(\"issue_id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"Author is current user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('author');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Bug critique √† corriger\",\n    \"description\": \"Description d√©taill√©e du bug rencontr√© dans l'application\",\n    \"tag\": \"BUG\",\n    \"priority\": \"HIGH\",\n    \"status\": \"TODO\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Lister les issues - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Issues have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('id');",
									"        pm.expect(jsonData[0]).to.have.property('title');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtenir une issue par ID - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issue details returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('description');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Modifier une issue - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issue updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('IN_PROGRESS');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Bug critique √† corriger - En cours\",\n    \"description\": \"Description mise √† jour avec plus de d√©tails\",\n    \"tag\": \"BUG\",\n    \"priority\": \"HIGH\",\n    \"status\": \"IN_PROGRESS\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Supprimer une issue - 204 No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"No content returned\", function () {",
									"    pm.expect(pm.response.text()).to.eql('');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üí¨ Comments",
			"item": [
				{
					"name": "Cr√©er un commentaire - 201 Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Comment created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData.content).to.eql('Premier commentaire sur cette issue');",
									"    ",
									"    // Stocker l'ID du commentaire",
									"    pm.collectionVariables.set(\"comment_id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"Author is current user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('author');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Premier commentaire sur cette issue\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/comments/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								"comments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Lister les commentaires - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Comments have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('id');",
									"        pm.expect(jsonData[0]).to.have.property('content');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/comments/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								"comments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtenir un commentaire par ID - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Comment details returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData).to.have.property('author');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/comments/{{comment_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								"comments",
								"{{comment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Modifier un commentaire - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Comment updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.content).to.eql('Commentaire modifi√© avec des informations suppl√©mentaires');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Commentaire modifi√© avec des informations suppl√©mentaires\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/comments/{{comment_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								"comments",
								"{{comment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Supprimer un commentaire - 204 No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"No content returned\", function () {",
									"    pm.expect(pm.response.text()).to.eql('');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/comments/{{comment_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								"comments",
								"{{comment_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "‚ùå Error Scenarios",
			"item": [
				{
					"name": "Endpoint inexistant - 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/endpoint-inexistant/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"endpoint-inexistant",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "JSON malform√© - 400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test\",\n    \"invalid_json\": \n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Token expir√© - 401 Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Token expired or invalid message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer token_expire_ou_invalide"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Test erreur serveur - 500 Internal Server Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or other error\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500, 400, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": null,\n    \"description\": \"Test pour provoquer une erreur serveur\",\n    \"type\": \"type_invalide_qui_pourrait_causer_erreur\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		},
		{
			"key": "test_username",
			"value": "auteur_principal",
			"type": "string"
		},
		{
			"key": "test_password",
			"value": "motdepasse123",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "project_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "issue_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "contributor_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "new_user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "other_user_token",
			"value": "",
			"type": "string"
		}
	]
}
